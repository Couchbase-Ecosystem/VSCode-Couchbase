<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>sqlpp</string>
		<string>n1ql</string>
		<string>n1qlnb</string>
		<string>.n1ql</string>
		<string>.n1qlnb</string>
		<string>sqlppnb</string>
		<string>.sqlppnb</string>
	</array>
	<key>keyEquivalent</key>
	<string>^@S</string>
	<key>name</key>
	<string>SQL++</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>(\[)[^\]]*(\])</string>
			<key>name</key>
			<string>text.bracketed</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b\d+\b</string>
			<key>name</key>
			<string>constant.numeric.n1ql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\bAS\b</string>
			<key>name</key>
			<string>keyword.other.alias.n1ql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(DESC|ASC)\b</string>
			<key>name</key>
			<string>keyword.other.order.n1ql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\+|\-|/|//|%|&amp;|\||\^|~|&lt;|>|&lt;=|=&gt;|=|!=|&lt;&gt;|&lt;@&gt;|@&gt;|&lt;@</string>
			<key>name</key>
			<string>keyword.operator.n1ql</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(DATE_ADD_MILLIS|DATE_ADD_STR|DATE_DIFF_MILLIS|DATE_DIFF_STR|DATE_FORMAT_STR|DATE_PART_MILLIS|DATE_PART_STR|DATE_RANGE_MILLIS|DATE_RANGE_STR|DATE_TRUNC_MILLIS|DATE_TRUNC_STR)\b\s*\(</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.datetime.n1ql</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(nullif|null_if)\b\s*\(</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.expression.n1ql</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(ABS|ACOS|ARRAY_APPEND|ARRAY_AVG|ARRAY_CONCAT|ARRAY_CONTAINS|ARRAY_COUNT|ARRAY_DISTINCT|ARRAY_FLATTEN|ARRAY_IFNULL|ARRAY_INSERT|ARRAY_INTERSECT|ARRAY_LENGTH|ARRAY_MAX|ARRAY_MIN|ARRAY_POSITION|ARRAY_PREPEND|ARRAY_PUT|ARRAY_RANGE|ARRAY_REMOVE|ARRAY_REPEAT|ARRAY_REPLACE|ARRAY_REVERSE|ARRAY_SORT|ARRAY_STAR|ARRAY_SUM|ARRAY_SYMDIFF|ARRAY_SYMDIFF1|ARRAY_SYMDIFFN|ARRAY_UNION|ASIN|ATAN|ATAN2|AVG|CEIL|CLOCK_LOCAL|CLOCK_MILLIS|CLOCK_STR|CLOCK_TZ|CLOCK_UTC|CONCAT|CONTAINS|COS|COUNT|DECODE_JSON|DEGREES|DURATION_TO_STR|E|ENCODE_JSON|ENCODED_SIZE|EXP|FLOOR|GREATEST|IF_INF|IF_MISSING|IF_MISSING_OR_NULL|IF_NAN|IF_NAN_OR_INF|IF_NULL|IFINF|IFMISSING|IFMISSINGORNULL|IFNAN|IFNANORINF|IFNULL|INITCAP|IS_ARRAY|IS_ATOM|IS_BOOL|IS_BOOLEAN|IS_NUM|IS_NUMBER|IS_OBJ|IS_OBJECT|IS_STR|IS_STRING|ISARRAY|ISATOM|ISBOOL|ISBOOLEAN|ISNUM|ISNUMBER|ISOBJ|ISOBJECT|ISSTR|ISSTRING|LEAST|LENGTH|LN|LOG|LOWER|LTRIM|MAX|META|MILLIS|MILLIS_TO_LOCAL|MILLIS_TO_STR|MILLIS_TO_TZ|MILLIS_TO_UTC|MILLIS_TO_ZONE_NAME|MIN|MISSING_IF|MISSINGIF|NAN_IF|NANIF|NEGINF_IF|NEGINFIF|NOW_LOCAL|NOW_MILLIS|NOW_STR|NOW_TZ|NOW_UTC|OBJECT_ADD|OBJECT_CONCAT|OBJECT_INNER_VALUES|OBJECT_LENGTH|OBJECT_NAMES|OBJECT_PAIRS|OBJECT_PUT|OBJECT_REMOVE|OBJECT_RENAME|OBJECT_REPLACE|OBJECT_UNWRAP|OBJECT_VALUES|PAIRS|PI|POSINF_IF|POSINFIF|POSITION|POWER|RADIANS|RANDOM|REGEXP_CONTAINS|REGEXP_LIKE|REGEXP_POSITION|REGEXP_REPLACE|REPEAT|REPLACE|REVERSE|ROUND|RTRIM|SIGN|SIN|SPLIT|SQRT|STR_TO_DURATION|STR_TO_MILLIS|STR_TO_TZ|STR_TO_UTC|STR_TO_ZONE_NAME|SUBSTR|SUM|TAN|TITLE|TO_ARRAY|TO_ATOM|TO_BOOL|TO_BOOLEAN|TO_NUM|TO_NUMBER|TO_OBJ|TO_OBJECT|TO_STR|TO_STRING|TOARRAY|TOATOM|TOBOOL|TOBOOLEAN|TONUM|TONUMBER|TOOBJ|TOOBJECT|TOSTR|TOSTRING|TRIM|TRUNC|TYPE|TYPENAME|UPPER|UUID|WEEKDAY_MILLIS|WEEKDAY_STR|CONCAT2|ARRAY_AGG|ARRAY_BINARY_SEARCH|ARRAY_EXCEPT|ARRAY_MOVE)\b\s*\(</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.n1ql</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>include</key>
			<string>#strings</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#regexps</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i:\b(ADAPTER|ALL|ALTER|ANALYTICS|AND|ANY|APPLY|ARGS|AT|AUTOGENERATED|BETWEEN|BTREE|BY|CASE|CAST|CLOSED|COLLECTION|COMPACT|COMPACTION|CONNECT|CONNECTED|CORRELATE|CREATE|CROSS|CUBE|CURRENT|DATASET|DATAVERSE|DECLARE|DEFINITION|DELETE|DISABLE|DISCONNECT|DISTINCT|DIV|DROP|ELEMENT|ELSE|ENABLE|END|ENFORCED|EVERY|EXCEPT|EXCLUDE|EXISTS|EXPLAIN|EXTERNAL|FEED|FILTER|FIRST|FLATTEN|FOLLOWING|FOR|FOREIGN|FROM|FULL|FULLTEXT|FUNCTION|GROUP|GROUPING|GROUPS|HAVING|HINTS|IF|IGNORE|IN|INCLUDE|INDEX|INGESTION|INNER|INSERT|INTERNAL|INTERSECT|INTO|IS|JOIN|KEY|KEYWORD|KNOWN|LAST|LEFT|LET|LETTING|LIKE|LIMIT|LINK|LOAD|MISSING|MOD|NGRAM|NO|NODEGROUP|NOT|NULL|NULLS|OFFSET|ON|OPEN|OR|ORDER|OTHERS|OUTER|OUTPUT|OVER|PARTITION|PATH|POLICY|PRECEDING|PRIMARY|RANGE|RAW|REFERENCES|REFRESH|REPLACE|RESPECT|RETURN|RETURNING|RETURNS|RIGHT|ROLLUP|ROW|ROWS|RTREE|RUN|SATISFIES|SCOPE|SECONDARY|SELECT|SET|SETS|SOME|START|STOP|SYNONYM|TEMPORARY|THEN|TIES|TO|TYPE|UNBOUNDED|UNION ALL|UNION|UNKNOWN|UNNEST|UPDATE|UPSERT|USE|USING|VALUE|VALUED|VIEW|WHEN|WHERE|WITH|WRITE|LET|NEST|ADVISE|BINARY|TRANSACTION|SAVEPOINT|PROBE)\b)</string>
			<key>name</key>
			<string>keyword.n1ql</string>
		</dict>
		<dict>
			<key>name</key>
			<string>constant.language.n1ql</string>
			<key>match</key>
			<string>(TRUE|FALSE)\b</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=--)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.n1ql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>--</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.n1ql</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\n</string>
							<key>name</key>
							<string>comment.line.double-dash.n1ql</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=#)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.n1ql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.n1ql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.c</string>
				</dict>
			</array>
		</dict>
		<key>regexps</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/(?=\S.*/)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.n1ql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.n1ql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.n1ql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_interpolation</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\/</string>
							<key>name</key>
							<string>constant.character.escape.slash.n1ql</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>%r\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.n1ql</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Handle nested bracket pairs!?! -- Allan</string>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.n1ql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.modr.n1ql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_interpolation</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string_escape</key>
		<dict>
			<key>match</key>
			<string>\\.</string>
			<key>name</key>
			<string>constant.character.escape.n1ql</string>
		</dict>
		<key>string_interpolation</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.n1ql</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.n1ql</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(#\{)([^\}]*)(\})</string>
			<key>name</key>
			<string>string.interpolated.n1ql</string>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.n1ql</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.n1ql</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>this is faster than the next begin/end rule since sub-pattern will match till end-of-line and N1QL files tend to have very long lines.</string>
					<key>match</key>
					<string>(')[^']*(')</string>
					<key>name</key>
					<string>string.quoted.single.n1ql</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.n1ql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.n1ql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.n1ql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escape</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.n1ql</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.n1ql</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>this is faster than the next begin/end rule since sub-pattern will match till end-of-line and n1ql files tend to have very long lines.</string>
					<key>match</key>
					<string>(`)[^`\\]*(`)</string>
					<key>name</key>
					<string>string.quoted.other.backtick.n1ql</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>`</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.n1ql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>`</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.n1ql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.other.backtick.n1ql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escape</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.n1ql</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.n1ql</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>this is faster than the next begin/end rule since sub-pattern will match till end-of-line and n1ql files tend to have very long lines.</string>
					<key>match</key>
					<string>(")[^"#]*(")</string>
					<key>name</key>
					<string>string.quoted.double.n1ql</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.n1ql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.n1ql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.n1ql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_interpolation</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>%\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.n1ql</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.n1ql</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.other.quoted.brackets.n1ql</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_interpolation</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.n1ql</string>
	<key>uuid</key>
	<string>7fb320c0-38e6-453a-82ef-f6f4ad143f4f</string>
</dict>
</plist>

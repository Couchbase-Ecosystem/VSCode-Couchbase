{
    "Create SQL++ Query": {
        "prefix": ["@cbq"],
        "body": ["var result = await ${1:cluster}.QueryAsync<dynamic>(","    \"${2:SQL++ Query}\",","    options => options.readonly(false)","        .metrics(true)","        .scanConsistency(QueryScanConsistency.RequestPlus)",");","","// check query was successful","if (result.MetaData.Status != QueryStatus.Success)","{","    // error","}","","// iterate over rows","await foreach (var row in result)","{","    // each row is an instance of the Query<T> call (e.g. dynamic or custom type)","}"],
        "description": "Use SQL++ to Query the Couchbase Cluster."
    },
    "SQL++ Query With all Options": {
        "prefix": ["@cbqopts"],
        "body": ["var result = await ${1:cluster}.QueryAsync<dynamic>(","    \"${2:SQL++ Query}\",","    options => options.clientContextId(${3:String})","        .parameters(${4:JsonArray})","        .parameters(${5:JsonObject})","        .priority(${6:boolean})","        .raw(${7:String, Object})","        .readonly(${8:boolean})","        .adhoc(${9:boolean})","        .consistentWith(${10:MutationState})","        .maxParallelism(${11:int})","        .metrics(${12:boolean})","        .pipelineBatch(${13:int})","        .pipelineCap(${14:int})","        .profile(${15:QueryProfile})","        .scanWait(${16:Duration})","        .scanCap(${17:int})","        .scanConsistency(${18:QueryScanConsistency})","        .serializer(${19:JsonSerializer})",");","","// check query was successful","if (result.MetaData.Status != QueryStatus.Success)","{","    // error","}","","// iterate over rows","await foreach (var row in result)","{","    // each row is an instance of the Query<T> call (e.g. dynamic or custom type)","}"],
        "description": "Use SQL++ to Query the Couchbase Cluster, this has all options available."
    },
    "SQL++ Query With Parameters": {
        "prefix": ["@cbqparam"],
        "body": ["var result = await ${1:cluster}.QueryAsync<dynamic>(","    \"${2:SQL++ Query}\",","    //Keep one of the following lines, depending on whether you want positional or named arguments. ","    options => options.Parameter(\"${3:value}\") //Use this to set positional arguments for a parameterized query.","    options => options.Parameter(\"${4:name}\", \"${5:value}\") //Use this to set named arguments for a parameterized query.",");","","// check query was successful","if (result.MetaData.Status != QueryStatus.Success)","{","    // error","}","","// iterate over rows","await foreach (var row in result)","{","    // each row is an instance of the Query<T> call (e.g. dynamic or custom type)","}"],
        "description": "Use parameterised SQL++ to query the Couchbase Cluster."
    },
    "SQL++ Query with FTS": {
        "prefix": ["@cbqfts"],
        "body": ["var result = await ${1:cluster}.QueryAsync<dynamic>(","    \"${2:SELECT ... FROM ... USE INDEX (USING FTS) WHERE ...}\",","    options => options.FlexIndex(true)",");","","// check query was successful","if (result.MetaData.Status != QueryStatus.Success)","{","    // error","}","","// iterate over rows","await foreach (var row in result)","{","    // each row is an instance of the Query<T> call (e.g. dynamic or custom type)","}"],
        "description": "Use SQL++ to query the Couchbase Cluster with full text search."
    },
    "SQL++ Query Import": {
        "prefix": ["@cbqimp"],
        "body": ["using System;","using System.Collections.Generic;","using System.Threading.Tasks;","using Couchbase;","using Couchbase.KeyValue;","using Couchbase.Query;"],
        "description": "Import all necessary query namespaces"
    },
    "SQL++ Query Example": {
        "prefix": ["@cbqex"],
        "body": ["using System;","using System.Collections.Generic;","using System.Threading.Tasks;","using Couchbase;","using Couchbase.KeyValue;","using Couchbase.Query;","","var cluster = await Cluster.ConnectAsync(\"${1:connectionString}\", \"${2:username}\", \"${3:password}\");","var result = await cluster.QueryAsync<dynamic>(","   \"${4:SQL++ Query}\",",");","","// check query was successful","if (result.MetaData.Status != QueryStatus.Success)","{","    // error","}","","// iterate over rows","await foreach (var row in result)","{","    // each row is an instance of the Query<T> call (e.g. dynamic or custom type)","}"],
        "description": "Example code that shows connecting to a cluster and running a query on it."
    }
}
{
    "Connect to Cluster": {
        "prefix": ["@cbcon"],
        "body": ["${1:cluster}, err := gocb.Connect(","    \"${2:connectionString}\",","    gocb.ClusterOptions{","        Username: \"${3:username}\",","        Password: \"${4:password}\",","    })","if err != nil {","    panic(err)","}","","// get a bucket reference","${5:bucket} := ${1:cluster}.Bucket(${6:bucketName})","","// We wait until the bucket is definitely connected and setup.","err = ${5:bucket}.WaitUntilReady(5*time.Second, nil)","if err != nil {","    panic(err)","}","","// get a user-defined collection reference","${7:scope} := ${5:bucket}.Scope(\"${8:scopeName}\")","${9:collection} := ${7:scope}.Collection(\"${10:collectionName}\")"],
        "description": "Connect to a cluster and get a reference to it, a bucket, and a collection."
    },
    "Connect to Cluster with TLS": {
        "prefix": ["@cbcontls"],
        "body": ["// We use the system certificate pool here and assume the Couchbase root certificate(s) have","// been installed there, but it is also possible to load these from a file.","rootCAs, err := x509.SystemCertPool()","if err != nil {","    panic(err)","}","","opts := gocb.ClusterOptions{","    Username: \"${3:username}\",","    Password: \"${4:password}\",","    SecurityConfig: gocb.SecurityConfig{","        TLSRootCAs: rootCAs,","    },","}","","${1:cluster}, err := gocb.Connect(\"${2:connectionString}\", opts)","if err != nil {","    panic(err)","}","","// get a bucket reference","${5:bucket} := ${1:cluster}.Bucket(${6:bucketName})","","// We wait until the bucket is definitely connected and setup.","err = ${5:bucket}.WaitUntilReady(5*time.Second, nil)","if err != nil {","    panic(err)","}","","// get a user-defined collection reference","${7:scope} := ${5:bucket}.Scope(\"${8:scopeName}\")","${9:collection} := ${7:scope}.Collection(\"${10:collectionName}\")"],
        "description": "Connect to a cluster using TLS and get a reference to it, a bucket, and a collection."
    },
    "Connect to Cluster DNS SRV": {
        "prefix": ["@cbcondns"],
        "body": ["//DNS SRV bootstrapping is available in the Go SDK.","//In order to make the SDK actually use the SRV records,","//you need to enable DNS SRV on the environment and pass in the host name from your records (here example.com):","${1:cluster}, err := gocb.Connect(","    \"${2:couchbase://mysrvrecord.hostname.com}\",","    gocb.ClusterOptions{","        Username: \"${3:username}\",","        Password: \"${4:password}\",","    })","if err != nil {","    panic(err)","}","","// get a bucket reference","${5:bucket} := ${1:cluster}.Bucket(${6:bucketName})","","// We wait until the bucket is definitely connected and setup.","err = ${5:bucket}.WaitUntilReady(5*time.Second, nil)","if err != nil {","    panic(err)","}","","// get a user-defined collection reference","${7:scope} := ${5:bucket}.Scope(\"${8:scopeName}\")","${9:collection} := ${7:scope}.Collection(\"${10:collectionName}\")"],
        "description": "Connect to a cluster using DNS SRV and get a reference to it, a bucket, and a collection."
    }
}
{
    "Upsert Document": {
        "prefix": ["@cbups"],
        "body": ["upsertResult, err := ${1:collection}.Upsert(\"${2:document-key}\", ${3:&document}, &gocb.UpsertOptions{","    Timeout: ${4:100} * time.Millisecond,","    Expiry:  ${5:60} * time.Second,","    DurabilityLevel: gocb.DurabilityLevel${6:Majority},","})","if err != nil {","    panic(err)","}"],
        "description": "Upsert a document to a collection with durability options."
    },
    "Insert Document": {
        "prefix": ["@cbins"],
        "body": ["insertResult, err := ${1:collection}.Insert(\"${2:document-key}\", ${3:&document}, &gocb.InsertOptions{","    Timeout: ${4:3} * time.Second,","})","if err != nil {","    panic(err)","}"],
        "description": "Insert a document into a collection."
    },
    "Replace Document": {
        "prefix": ["@cbrep"],
        "body": ["replaceResult, err := ${1:collection}.Get(\"${2:document-key}\", nil)","if err != nil {","    panic(err)","}","","updateResult, err := ${1:collection}.Replace(\"${2:document-key}\", ${3:doc}, &gocb.ReplaceOptions{","    Cas: replaceResult.Cas(),","})"],
        "description": "Replace a document in a collection."
    },
    "Get Document": {
        "prefix": ["@cbget"],
        "body": ["getResult, err := ${1:collection}.Get(\"${2:document-key}\", &gocb.GetOptions{","    Timeout: ${3:10} * time.Millisecond,","})","if err != nil {","    panic(err)","}","","var getDoc myDoc","err = getResult.Content(&getDoc)","if err != nil {","    panic(err)","}","fmt.Println(getDoc)"],
        "description": "Use a key to get a document from a collection."
    },
    "Remove Document": {
        "prefix": ["@cbrem"],
        "body": ["removeResult, err := ${1:collection}.Remove(\"${2:document-key}\", &gocb.RemoveOptions{","    Timeout:         ${3:100} * time.Millisecond,","    DurabilityLevel: gocb.DurabilityLevel${4:Majority},","})","if err != nil {","    panic(err)","}"],
        "description": "Use a key to remove a document from a collection."
    },
    "KV Import": {
        "prefix": ["@cbkvimp"],
        "body": ["import (","    \"fmt\"","    \"time\"","","    \"github.com/couchbase/gocb/v2\"",")"],
        "description": "Import all necessary KV namespace."
    },
    "KV Example": {
        "prefix": ["@cbkvex"],
        "body": ["import (","    \"fmt\"","    \"time\"","","    \"github.com/couchbase/gocb/v2\"",")","","//Insert a Document","resultwithOptions, err := ${1:collection}.Insert(\"${2:document-key}\", map[string]string{\"foo\": \"bar\"}, &gocb.InsertOptions{","    Timeout: 3 * time.Second,","})","if err != nil {","    panic(err)","}","","//Upsert a Document","expiryResult, err := ${1:collection}.Upsert(\"${2:document-key}\", map[string]string{\"bar\": \"foo\"}, &gocb.UpsertOptions{","    Timeout: 100 * time.Millisecond,","    Expiry:  60 * time.Second,","    DurabilityLevel: gocb.DurabilityLevelMajority,","})","","//Get a Document","getResult, err := ${1:collection}.Get(\"${2:document-key}\", &gocb.GetOptions{","    Timeout: 10 * time.Millisecond,","})","if err != nil {","    panic(err)","}","","var getDoc myDoc","err = getResult.Content(&getDoc)","if err != nil {","    panic(err)","}","fmt.Println(getDoc)","","//Replace a Document","updateGetResult, err := ${1:collection}.Get(\"${2:document-key}\", nil)","if err != nil {","    panic(err)","}","","updateResult, err := ${1:collection}.Replace(\"${2:document-key}\", map[string]string{\"foobar\": \"barfoo\"}, &gocb.ReplaceOptions{","    Cas: updateGetResult.Cas(),","})","","//Remove a Document","removeResult, err := ${1:collection}.Remove(\"${2:document-key}\", &gocb.RemoveOptions{","    Timeout:         100 * time.Millisecond,","    DurabilityLevel: gocb.DurabilityLevelMajority,","})","if err != nil {","    panic(err)","}"],
        "description": "Example code that shows: inserting, upserting, getting, replacing, and removing a document. Along with all required imports."
    },
    "JSON Transcoder": {
        "prefix": ["@cbtranscoder"],
        "body": ["user := User{Name: \"John Smith\", Age: 27}","transcoder := gocb.NewRawJSONTranscoder()","","b, err := ffjson.Marshal(user)","if err != nil {","    panic(err)","}","","_, err = ${1:collection}.Upsert(\"john-smith\", b, &gocb.UpsertOptions{","    Transcoder: transcoder,","})","if err != nil {","    panic(err)","}"],
        "description": "Example code that shows how to use a RawJSONTranscoder on an upsert operation."
    },
    "Document Expiration": {
        "prefix": ["@cbsetexp"],
        "body": ["touchResult, err := ${1:collection}.Touch(\"${2:{document-key}\", ${3:60}*time.Second, &gocb.TouchOptions{","    Timeout: 100 * time.Millisecond,","})","if err != nil {","    panic(err)","}"],
        "description": "Use Document Expiration"
    }
}
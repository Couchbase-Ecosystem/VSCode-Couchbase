{
    "Upsert Document": {
        "prefix": ["@cbups"],
        "body": ["document = {\"${1:key1}\": \"${2:value1}\", \"${3:key2}\": \"${4:value2}\"}","opts = UpsertOptions(durability=ServerDurability(Durability.${5:MAJORITY}))","result = ${6:collection}.upsert(\"${7:document-key}\", document, opts)"],
        "description": " Upsert a document to a collection with durability options."
    },
    "Insert Document": {
        "prefix": ["@cbins"],
        "body": ["try:","    document = {\"${1:key1}\": \"${2:value1}\", \"${3:key2}\": \"${4:value2}\"}","    opts = InsertOptions(timeout=timedelta(seconds=${5:5}))","    result = ${6:collection}.insert(\"${7:document-key}\","    ,"                               document,"    ,"                               opts,"    ,"                               expiry=timedelta(seconds=${8:30}))","except DocumentExistsException:","    print(\"Document exists, cannot use insert.\")"],
        "description": "Insert a document into a collection."
    },
    "Replace Document": {
        "prefix": ["@cbrep"],
        "body": ["try:","    document = {\"${1:key1}\": \"${2:value1}\", \"${3:key2}\": \"${4:value2}\"}","    result = ${5:collection}.replace(","        \"${6:document-key}\","    ,"        document,"    ,"        cas=${7:cas},"    ,"        timeout=timedelta(","            minutes=${8:1}))","except DocumentNotFoundException:","    print(\"Document not found, cannot use replace.\")","except CASMismatchException:","    print(\"CAS mismatch.\")"],
        "description": "Replace a document in a collection."
    },
    "Get Document": {
        "prefix": ["@cbget"],
        "body": ["try:","    opts = GetOptions(timeout=timedelta(seconds=${1:5}))","    result = ${2:collection}.get(\"${3:document-key}\", opts)","    print(result.content_as[dict])","except DocumentNotFoundException:","    print(\"Document not found, cannot use get.\")"],
        "description": "Use a key to get a document from a collection."
    },
    "Remove Document": {
        "prefix": ["@cbrem"],
        "body": ["try:","    result = ${1:collection}.remove(","    \"${2:document-key}\",","        RemoveOptions(","            cas=${3:cas},","            durability=ServerDurability(","                Durability.${4:MAJORITY})))","except DocumentNotFoundException:","    print(\"Document not found, cannot use remove.\")"],
        "description": "Use a key to remove a document from a collection."
    },
    "KV Import": {
        "prefix": ["@cbkvimp"],
        "body": ["from datetime import timedelta","","from couchbase.durability import (Durability, ServerDurability, ClientDurability, ReplicateTo, PersistTo)","from couchbase.exceptions import CouchbaseException, CASMismatchException","from couchbase.cluster import Cluster","from couchbase.auth import PasswordAuthenticator","from couchbase.collection import (","    InsertOptions,","    ReplaceOptions,","    UpsertOptions,","    GetOptions,","    RemoveOptions,","    IncrementOptions,","    DecrementOptions)","from couchbase.collection import DeltaValue, SignedInt64"],
        "description": "Import all necessary KV namespace."
    },
    "KV Example": {
        "prefix": ["@cbkvex"],
        "body": ["from datetime import timedelta","","from couchbase.durability import (Durability, ServerDurability, ClientDurability, ReplicateTo, PersistTo)","from couchbase.exceptions import CouchbaseException, CASMismatchException","from couchbase.cluster import Cluster","from couchbase.auth import PasswordAuthenticator","from couchbase.collection import (","    InsertOptions,","    ReplaceOptions,","    UpsertOptions,","    GetOptions,","    RemoveOptions,","    IncrementOptions,","    DecrementOptions)","from couchbase.collection import DeltaValue, SignedInt64","","#Insert a document","document = {\"foo\": \"bar\"}","opts = InsertOptions(timeout=timedelta(seconds=5))","result = ${1:collection}.insert(\"${2:document-key}\",","                           document,","                           opts,","                           expiry=timedelta(seconds=30))","","#Upsert a document","document = {\"bar\": \"foo\"}","result = ${1:collection}.upsert(\"${2:document-key}\", document)","","#Get a document","opts = GetOptions(timeout=timedelta(seconds=5))","result = ${1:collection}.get(\"${2:document-key}\", opts)","print(result.content_as[dict])","","#Replace a document","document = {\"foobar\": \"barfoo\"}","result = ${1:collection}.replace(","    \"${2:document-key}\",","    document,","    cas=${3:cas},","    timeout=timedelta(","        minutes=1))","","#Remove a document","result = ${1:collection}.remove(","    \"${2:document-key}\",","    RemoveOptions(","        cas=${4:cas},","        durability=ServerDurability(","            Durability.MAJORITY)))"],
        "description": "Example code that shows: inserting, upserting, getting, replacing, and removing a document. Along with all required imports."
    },
    "JSON Transcoder": {
        "prefix": ["@cbtranscoder"],
        "body": ["transcoder = RawJSONTranscoder()","user = {\"name\": \"John Smith\", \"age\": 27}","","data = orjson.dumps(user)","try:","    _ = ${1:collection}.upsert(","        \"john-smith\", data, UpsertOptions(transcoder=transcoder))","except (ValueFormatException, CouchbaseException) as ex:","    traceback.print_exc()"],
        "description": "Example code that shows how to use a RawJSONTranscoder on an upsert operation."
    },
    "Document Expiration": {
        "prefix": ["@cbsetexp"],
        "body": ["try:","    result = ${1:collection}.touch(\"${2:document-key}\", timedelta(seconds=${3:10}))","except DocumentNotFoundException:","    print(\"Document not found, cannot use touch.\")"],
        "description": "Use Document Expiration"
    }
}
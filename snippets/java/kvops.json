{
    "Upsert Document": {
        "prefix": ["@cbups"],
        "body": ["JsonObject content = JsonObject.create()","    .put(\"${1:key}\", \"${2:value}\")","","MutationResult result = ${3:collection}.upsert(\"${4:document-key}\", content);"],
        "description": "Upsert a document to a collection."
    },
    "Insert Document": {
        "prefix": ["@cbins"],
        "body": ["try {","    JsonObject content = JsonObject.create()","        .put(\"${1:key}\", \"${2:value}\");","    MutationResult insertResult = ${3:collection}.insert(\"${4:document-key}\", content);","} catch (DocumentExistsException ex) {","    System.err.println(\"The document already exists!\");","} catch (CouchbaseException ex) {","    System.err.println(\"Something else happened: \" + ex);","}"],
        "description": "Insert a document into a collection."
    },
    "Replace Document": {
        "prefix": ["@cbrep"],
        "body": ["for(int i = 0; i < ${1:maxAttempts}; i++) {","    GetResult found = ${2:collection}.get(\"${3:document-key}\");","    JsonObject content = found.contentAsObject();","","    try {","        ${2:collection}.replace(\"${3:document-key}\", ${4:JsonObject-Document}, replaceOptions().cas(found.cas()));","        break; // if successful, break out of the retry loop","    } catch (CasMismatchException ex) {","        // don't do anything, we'll retry the loop","    }","}"],
        "description": "Replace a document in a collection."
    },
    "Get Document": {
        "prefix": ["@cbget"],
        "body": ["try {","    GetResult getResult = ${1:collection}.get(\"${2:document-key}\");","    JsonObject content = getResult.contentAsObject()","} catch (DocumentNotFoundException ex) {","    System.out.println(\"Document not found!\");","}"],
        "description": "Use a key to get a document from a collection."
    },
    "Remove Document": {
        "prefix": ["@cbrem"],
        "body": ["try {","    ${1:collection}.remove(\"${2:document-key}\");","} catch (DocumentNotFoundException ex) {","    System.out.println(\"Document did not exist when trying to remove\");","}"],
        "description": "Use a key to remove a document from a collection."
    },
    "KV Import": {
        "prefix": ["@cbkvimp"],
        "body": ["import static com.couchbase.client.java.kv.GetOptions.getOptions;","import static com.couchbase.client.java.kv.InsertOptions.insertOptions;","import static com.couchbase.client.java.kv.ReplaceOptions.replaceOptions;","import static com.couchbase.client.java.kv.UpsertOptions.upsertOptions;","","import java.time.Duration;","import java.time.Instant;","import java.time.Period;","import java.util.Optional;","","import com.couchbase.client.core.error.CasMismatchException;","import com.couchbase.client.core.error.CouchbaseException;","import com.couchbase.client.core.error.DocumentExistsException;","import com.couchbase.client.core.error.DocumentNotFoundException;","import com.couchbase.client.core.error.DurabilityImpossibleException;","import com.couchbase.client.core.error.ReplicaNotConfiguredException;","import com.couchbase.client.core.msg.kv.DurabilityLevel;","import com.couchbase.client.java.AsyncCollection;","import com.couchbase.client.java.Bucket;","import com.couchbase.client.java.Cluster;","import com.couchbase.client.java.Collection;","import com.couchbase.client.java.ReactiveCollection;","import com.couchbase.client.java.Scope;","import com.couchbase.client.java.json.JsonObject;","import com.couchbase.client.java.kv.GetResult;","import com.couchbase.client.java.kv.MutationResult;","import com.couchbase.client.java.kv.PersistTo;","import com.couchbase.client.java.kv.ReplicateTo;"],
        "description": "Import all necessary KV namespace."
    },
    "KV Example": {
        "prefix": ["@cbkvex"],
        "body": ["import static com.couchbase.client.java.kv.GetOptions.getOptions;","import static com.couchbase.client.java.kv.InsertOptions.insertOptions;","import static com.couchbase.client.java.kv.ReplaceOptions.replaceOptions;","import static com.couchbase.client.java.kv.UpsertOptions.upsertOptions;","","import java.time.Duration;","import java.time.Instant;","import java.time.Period;","import java.util.Optional;","","import com.couchbase.client.core.error.CasMismatchException;","import com.couchbase.client.core.error.CouchbaseException;","import com.couchbase.client.core.error.DocumentExistsException;","import com.couchbase.client.core.error.DocumentNotFoundException;","import com.couchbase.client.core.error.DurabilityImpossibleException;","import com.couchbase.client.core.error.ReplicaNotConfiguredException;","import com.couchbase.client.core.msg.kv.DurabilityLevel;","import com.couchbase.client.java.AsyncCollection;","import com.couchbase.client.java.Bucket;","import com.couchbase.client.java.Cluster;","import com.couchbase.client.java.Collection;","import com.couchbase.client.java.ReactiveCollection;","import com.couchbase.client.java.Scope;","import com.couchbase.client.java.json.JsonObject;","import com.couchbase.client.java.kv.GetResult;","import com.couchbase.client.java.kv.MutationResult;","import com.couchbase.client.java.kv.PersistTo;","import com.couchbase.client.java.kv.ReplicateTo;","","//Insert a document","try {","    JsonObject content = JsonObject.create()","        .put(\"foo\", \"bar\");","    MutationResult insertResult = ${1:collection}.insert(\"${2:document-key}\", content);","} catch (DocumentExistsException ex) {","    System.err.println(\"The document already exists!\");","} catch (CouchbaseException ex) {","    System.err.println(\"Something else happened: \" + ex);","}","","//Upsert a document","JsonObject content = JsonObject.create()","    .put(\"bar\", \"foo\");","","MutationResult result = ${1:collection}.upsert(\"${2:document-key}\", content);","","//Get a document","try {","    GetResult getResult = ${1:collection}.get(\"${2:document-key}\");","    JsonObject content = getResult.contentAsObject()","} catch (DocumentNotFoundException ex) {","    System.out.println(\"Document not found!\");","}","","//Replace a document","JsonObject document = JsonObject.create()","    .put(\"foobar\", \"barfoo\");","for(int i = 0; i < 10; i++) {","    GetResult found = ${1:collection}.get(\"${2:document-key}\");","    JsonObject content = found.contentAsObject();","","    try {","        ${1:collection}.replace(\"${2:document-key}\", document, replaceOptions().cas(found.cas()));","        break; // if successful, break out of the retry loop","    } catch (CasMismatchException ex) {","        // don't do anything, we'll retry the loop","    }","}","","//Remove a document","try {","    ${1:collection}.remove(\"${2:document-key}\");","} catch (DocumentNotFoundException ex) {","    System.out.println(\"Document did not exist when trying to remove\");","}"],
        "description": "Example code that shows: inserting, upserting, getting, replacing, and removing a document. Along with all required imports."
    },
    "JSON Transcoder": {
        "prefix": ["@cbtranscoder"],
        "body": ["// User is a simple POJO","// You may wish to replace this with your own object","User user = new User(\"John Smith\", 27);","","Gson gson = new Gson();","String json = gson.toJson(user);","","${1:collection}.upsert(\"john-smith\", json, UpsertOptions.upsertOptions().transcoder(RawJsonTranscoder.INSTANCE));"],
        "description": "Example code that shows how to use a RawJSONTranscoder on an upsert operation."
    },
    "Document Expiration": {
        "prefix": ["@cbsetexp"],
        "body": ["try {","    GetResult result = ${1:collection}.getAndTouch(\"${2:document-key}\", Duration.ofDays(${3:1}));","} catch (DocumentNotFoundException ex) {","    System.out.println(\"Document not found!\");","}"],
        "description": "Use Document Expiration"
    }
}